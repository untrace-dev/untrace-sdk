name: "Release VSCode Extension"
description: "Package and publish VSCode extension to Visual Studio Marketplace, Open VSX Registry, and create GitHub release"

inputs:
  version:
    description: "Version number for the release"
    required: true
  vsce_pat:
    description: "Personal Access Token for Visual Studio Marketplace"
    required: true
  ovsx_pat:
    description: "Personal Access Token for Open VSX Registry"
    required: true
  node_env:
    description: "Node environment"
    required: true
  next_public_app_env:
    description: "Next.js public app environment"
    required: true
runs:
  using: composite
  steps:
    - name: Setup Environment
      uses: ./tooling/github/setup

    - name: Build Stripe Generated Files
      shell: bash
      working-directory: packages/stripe
      env:
        NODE_ENV: ${{ inputs.node_env }}
        NEXT_PUBLIC_APP_ENV: ${{ inputs.next_public_app_env }}
      run: |
        echo "Building Stripe generated files..."
        bun run build

    - name: Package VSCode Extension
      shell: bash
      working-directory: apps/vscode-extension
      env:
        NODE_ENV: ${{ inputs.node_env }}
        NEXT_PUBLIC_APP_ENV: ${{ inputs.next_public_app_env }}
      run: |
        echo "Environment variables:"
        echo "NODE_ENV: $NODE_ENV"
        echo "CI: $CI"
        echo "GITHUB_ACTIONS: $GITHUB_ACTIONS"
        echo "NEXT_PUBLIC_APP_ENV: $NEXT_PUBLIC_APP_ENV"
        echo "Preparing, building, and packaging VSCode extension..."
        bun run package

        # Verify the expected file was created
        if [ ! -f "untrace-vscode-${{ inputs.version }}.vsix" ]; then
          echo "Expected package file not found. Listing available files:"
          ls -la *.vsix || echo "No .vsix files found"
          exit 1
        fi

        echo "✅ Package created: untrace-vscode-${{ inputs.version }}.vsix"

    - name: Publish to Visual Studio Marketplace
      shell: bash
      working-directory: apps/vscode-extension
      env:
        VSCE_PAT: ${{ inputs.vsce_pat }}
      run: |
        echo "Publishing to Visual Studio Marketplace..."
        bunx vsce publish --packagePath untrace-vscode-${{ inputs.version }}.vsix

    - name: Publish to Open VSX Registry
      shell: bash
      working-directory: apps/vscode-extension
      env:
        OVSX_PAT: ${{ inputs.ovsx_pat }}
      run: |
        echo "Publishing to Open VSX Registry..."

        # Get publisher name from package.json
        PUBLISHER=$(node -p "require('./package.json').publisher")
        echo "Publisher: $PUBLISHER"

        # Create namespace if it doesn't exist (this will fail silently if it already exists)
        echo "Ensuring namespace exists..."
        bunx ovsx create-namespace "$PUBLISHER" --pat "$OVSX_PAT" || echo "Namespace may already exist, continuing..."

        # Publish to Open VSX Registry
        echo "Publishing extension..."
        bunx ovsx publish untrace-vscode-${{ inputs.version }}.vsix --pat "$OVSX_PAT"

        echo "✅ Successfully published to Open VSX Registry!"

    - name: Read changelog
      id: changelog
      shell: bash
      working-directory: apps/vscode-extension
      run: |
        # Read the changelog file
        if [ ! -f "CHANGELOG.md" ]; then
          echo "CHANGELOG.md not found, using default release notes"
          echo "body=Release of VSCode extension v${{ inputs.version }}" >> $GITHUB_OUTPUT
          exit 0
        fi

        CHANGELOG=$(cat CHANGELOG.md)
        VERSION="${{ inputs.version }}"

        # Find the start of the version section
        START_LINE=$(echo "$CHANGELOG" | grep -n "^## $VERSION" | cut -d: -f1)
        if [ -z "$START_LINE" ]; then
          echo "Could not find version $VERSION in changelog, using default release notes"
          echo "body=Release of VSCode extension v${{ inputs.version }}" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Find the next version section or end of file
        NEXT_VERSION_LINE=$(echo "$CHANGELOG" | tail -n +$((START_LINE + 1)) | grep -n "^## " | head -n 1 | cut -d: -f1)

        if [ -z "$NEXT_VERSION_LINE" ]; then
          # If no next version found, take everything until the end
          BODY=$(echo "$CHANGELOG" | tail -n +$((START_LINE + 1)))
        else
          # Take content until the next version
          BODY=$(echo "$CHANGELOG" | tail -n +$((START_LINE + 1)) | head -n $((NEXT_VERSION_LINE - 1)))
        fi

        # Clean up the content
        BODY=$(echo "$BODY" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

        # Set output
        echo "body<<EOF" >> $GITHUB_OUTPUT
        echo "$BODY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: vscode-v${{ inputs.version }}
        name: VSCode Extension v${{ inputs.version }}
        body: ${{ steps.changelog.outputs.body }}
        draft: false
        prerelease: false
        files: |
          apps/vscode-extension/untrace-vscode-${{ inputs.version }}.vsix
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}