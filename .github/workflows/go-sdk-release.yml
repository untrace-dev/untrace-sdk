name: Go SDK Release

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Changeset NPM Release"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: write
  packages: write
  actions: read

env:
  FORCE_COLOR: 3
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      is_version_bump: ${{ steps.check.outputs.is_version_bump }}
      go_version_changed: ${{ steps.check-go.outputs.version_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - id: check
        run: |
          if [[ "${{ github.event.workflow_run.head_commit.message }}" =~ ^chore:\ version\ packages.*$ ]]; then
            echo "is_version_bump=true" >> $GITHUB_OUTPUT
          else
            echo "is_version_bump=false" >> $GITHUB_OUTPUT
          fi

      - id: check-go
        name: Check if Go SDK version changed
        run: |
          # Check if the Go SDK version was bumped in go.mod
          if git diff HEAD~1 HEAD -- sdks/go/go.mod | grep -q 'version'; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "Go SDK version was changed in go.mod"
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "Go SDK version was not changed in go.mod"
          fi

  release:
    name: Release Go SDK
    needs: check-version
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.is_version_bump == 'true' && needs.check-version.outputs.go_version_changed == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          # Need full history for Changesets
          fetch-depth: 0

      - name: Setup Environment
        uses: ./.github/actions/setup

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./sdks/go/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create package.json for Go SDK if it doesn't exist
        run: |
          if [ ! -f "sdks/go/package.json" ]; then
            cat > sdks/go/package.json << EOF
          {
            "name": "untrace-go-sdk",
            "version": "${{ steps.version.outputs.version }}",
            "description": "LLM observability SDK for Go applications",
            "main": "untrace.go",
            "repository": {
              "type": "git",
              "url": "git+https://github.com/untrace-dev/untrace-sdk.git"
            },
            "keywords": ["go", "sdk", "observability", "llm", "tracing"],
            "author": "Untrace",
            "license": "MIT"
          }
          EOF
          fi

      - name: Update Go module version
        working-directory: sdks/go
        run: |
          # Update the module version in go.mod to match the package.json version
          go mod edit -module github.com/untrace-dev/untrace-sdk-go@v${{ steps.version.outputs.version }}

      - name: Verify Go module
        working-directory: sdks/go
        run: |
          go mod tidy
          go mod verify

      - name: Run tests before release
        working-directory: sdks/go
        run: go test ./... -v

      - name: Create and push Git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "go-sdk-v${{ steps.version.outputs.version }}" -m "Go SDK v${{ steps.version.outputs.version }}"
          git push origin "go-sdk-v${{ steps.version.outputs.version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: go-sdk-v${{ steps.version.outputs.version }}
          name: Go SDK v${{ steps.version.outputs.version }}
          body: |
            Release of Go SDK v${{ steps.version.outputs.version }}

            This release includes:
            - Go module published to Go proxy (pkg.go.dev)
            - Version: ${{ steps.version.outputs.version }}
            - Install with: `go get github.com/untrace-dev/untrace-sdk-go@v${{ steps.version.outputs.version }}`

            ## Installation

            ```bash
            go get github.com/untrace-dev/untrace-sdk-go@v${{ steps.version.outputs.version }}
            ```

            ## Usage

            ```go
            import "github.com/untrace-dev/untrace-sdk-go"

            client, err := untrace.Init(untrace.Config{
                APIKey: "your-api-key",
                ServiceName: "my-llm-app",
            })
            ```
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Go proxy
        run: |
          # The Go proxy will automatically pick up the new version
          # We can make a request to ensure it's processed
          curl "https://proxy.golang.org/github.com/untrace-dev/untrace-sdk-go/@v/v${{ steps.version.outputs.version }}.info"
