name: Python SDK Release

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Changeset NPM Release"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: write
  packages: write
  actions: read

env:
  FORCE_COLOR: 3
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      is_version_bump: ${{ steps.check.outputs.is_version_bump }}
      python_version_changed: ${{ steps.check-python.outputs.version_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - id: check
        run: |
          if [[ "${{ github.event.workflow_run.head_commit.message }}" =~ ^chore:\ version\ packages.*$ ]]; then
            echo "is_version_bump=true" >> $GITHUB_OUTPUT
          else
            echo "is_version_bump=false" >> $GITHUB_OUTPUT
          fi

      - id: check-python
        name: Check if Python SDK version changed
        run: |
          # Check if the Python SDK version was bumped in the last commit
          if git diff HEAD~1 HEAD -- sdks/python/package.json | grep -q '"version"'; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "Python SDK version was changed"
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "Python SDK version was not changed"
          fi

  release:
    name: Release Python SDK
    needs: check-version
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.is_version_bump == 'true' && needs.check-version.outputs.python_version_changed == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          # Need full history for Changesets
          fetch-depth: 0

      - name: Setup Environment
        uses: ./.github/actions/setup

      - name: Setup Python Environment
        uses: ./.github/actions/python-setup

      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./sdks/python/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Python package
        run: |
          cd sdks/python
          uv run python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          cd sdks/python
          uv run python -m twine upload dist/*

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: python-sdk-v${{ steps.version.outputs.version }}
          name: Python SDK v${{ steps.version.outputs.version }}
          body: |
            Release of Python SDK v${{ steps.version.outputs.version }}

            This release includes:
            - Python SDK package published to PyPI
            - Version: ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
